# WHIRLPOOL abstract

c_code = r'''
#define table_skew(val, num) (rol((val), 8 * (num)))
#define BYTE(x, n)     (((x) >> (8 * (n))) & 0xFF)

#define READ_DATA_W(x)   do { \
		sn ## x = n ## x = src[(x)]; \
	} while (0)

#define UPDATE_STATE_W(x)   do { \
		state[x] ^= n ## x ^ sn ## x; \
	} while (0)

#define ROUND0_W(x)   do { \
		n ## x ^= h ## x; \
	} while (0)

#define READ_STATE_W(x)   do { h ## x = state[x]; } while (0)
#undef READ_STATE_W
#define READ_STATE_W(x)   do { h ## x = new_var(); h ## x === state[x]; } while (0)

#define MUL8(FUN)   do { \
		FUN(0); \
		FUN(1); \
		FUN(2); \
		FUN(3); \
		FUN(4); \
		FUN(5); \
		FUN(6); \
		FUN(7); \
	} while (0)

#define READ_DATA      MUL8(READ_DATA_W)
#define READ_STATE     MUL8(READ_STATE_W)
#define ROUND0         MUL8(ROUND0_W)
#define UPDATE_STATE   MUL8(UPDATE_STATE_W)

#define ROUND_ELT(table, in, i0, i1, i2, i3, i4, i5, i6, i7) \
	(table ## 0[BYTE(in ## i0, 0)] \
	^ table_skew(table ## 0[BYTE(in ## i1, 1)], 1) \
	^ table_skew(table ## 0[BYTE(in ## i2, 2)], 2) \
	^ table_skew(table ## 0[BYTE(in ## i3, 3)], 3) \
	^ table_skew(table ## 0[BYTE(in ## i4, 4)], 4) \
	^ table_skew(table ## 0[BYTE(in ## i5, 5)], 5) \
	^ table_skew(table ## 0[BYTE(in ## i6, 6)], 6) \
	^ table_skew(table ## 0[BYTE(in ## i7, 7)], 7))

#define ROUND(table, in, out, c0, c1, c2, c3, c4, c5, c6, c7)   do { \
		out ## 0 = ROUND_ELT(table, in, 0, 7, 6, 5, 4, 3, 2, 1) ^ c0; \
		out ## 1 = ROUND_ELT(table, in, 1, 0, 7, 6, 5, 4, 3, 2) ^ c1; \
		out ## 2 = ROUND_ELT(table, in, 2, 1, 0, 7, 6, 5, 4, 3) ^ c2; \
		out ## 3 = ROUND_ELT(table, in, 3, 2, 1, 0, 7, 6, 5, 4) ^ c3; \
		out ## 4 = ROUND_ELT(table, in, 4, 3, 2, 1, 0, 7, 6, 5) ^ c4; \
		out ## 5 = ROUND_ELT(table, in, 5, 4, 3, 2, 1, 0, 7, 6) ^ c5; \
		out ## 6 = ROUND_ELT(table, in, 6, 5, 4, 3, 2, 1, 0, 7) ^ c6; \
		out ## 7 = ROUND_ELT(table, in, 7, 6, 5, 4, 3, 2, 1, 0) ^ c7; \
	} while (0)

#define ROUND_KSCHED(table, in, out, c) \
	ROUND(table, in, out, c, 0, 0, 0, 0, 0, 0, 0)

#define ROUND_WENC(table, in, key, out) \
	ROUND(table, in, out, key ## 0, key ## 1, key ## 2, \
		key ## 3, key ## 4, key ## 5, key ## 6, key ## 7)

#define TRANSFER(dst, src)   do { \
		dst ## 0 = src ## 0; \
		dst ## 1 = src ## 1; \
		dst ## 2 = src ## 2; \
		dst ## 3 = src ## 3; \
		dst ## 4 = src ## 4; \
		dst ## 5 = src ## 5; \
		dst ## 6 = src ## 6; \
		dst ## 7 = src ## 7; \
	} while (0)
#undef TRANSFER

#define TRANSFER(dst, src)   do { \
		dst ## 0 === src ## 0; \
		dst ## 1 === src ## 1; \
		dst ## 2 === src ## 2; \
		dst ## 3 === src ## 3; \
		dst ## 4 === src ## 4; \
		dst ## 5 === src ## 5; \
		dst ## 6 === src ## 6; \
		dst ## 7 === src ## 7; \
	} while (0)

#define MY_ROUND_FUN(name, type) \
	READ_DATA; \
	READ_STATE; \
	ROUND0; \
	r = cycle_const_range('r', 0, 10 - 1, 1); \
		ROUND_KSCHED(type ## _T, h, tmp, type ## _RC[r]); \
		TRANSFER(h, tmp); \
		ROUND_WENC(type ## _T, n, h, tmp); \
		TRANSFER(n, tmp); \
	cycle_end('r'); \
	UPDATE_STATE; \
;

MY_ROUND_FUN(whirlpool, plain)
'''

Var.setup('le', 8)

SPH_C64 = new_const
plain_T0 = [
	SPH_C64(0xD83078C018601818), SPH_C64(0x2646AF05238C2323),
	SPH_C64(0xB891F97EC63FC6C6), SPH_C64(0xFBCD6F13E887E8E8),
	SPH_C64(0xCB13A14C87268787), SPH_C64(0x116D62A9B8DAB8B8),
	SPH_C64(0x0902050801040101), SPH_C64(0x0D9E6E424F214F4F),
	SPH_C64(0x9B6CEEAD36D83636), SPH_C64(0xFF510459A6A2A6A6),
	SPH_C64(0x0CB9BDDED26FD2D2), SPH_C64(0x0EF706FBF5F3F5F5),
	SPH_C64(0x96F280EF79F97979), SPH_C64(0x30DECE5F6FA16F6F),
	SPH_C64(0x6D3FEFFC917E9191), SPH_C64(0xF8A407AA52555252),
	SPH_C64(0x47C0FD27609D6060), SPH_C64(0x35657689BCCABCBC),
	SPH_C64(0x372BCDAC9B569B9B), SPH_C64(0x8A018C048E028E8E),
	SPH_C64(0xD25B1571A3B6A3A3), SPH_C64(0x6C183C600C300C0C),
	SPH_C64(0x84F68AFF7BF17B7B), SPH_C64(0x806AE1B535D43535),
	SPH_C64(0xF53A69E81D741D1D), SPH_C64(0xB3DD4753E0A7E0E0),
	SPH_C64(0x21B3ACF6D77BD7D7), SPH_C64(0x9C99ED5EC22FC2C2),
	SPH_C64(0x435C966D2EB82E2E), SPH_C64(0x29967A624B314B4B),
	SPH_C64(0x5DE121A3FEDFFEFE), SPH_C64(0xD5AE168257415757),
	SPH_C64(0xBD2A41A815541515), SPH_C64(0xE8EEB69F77C17777),
	SPH_C64(0x926EEBA537DC3737), SPH_C64(0x9ED7567BE5B3E5E5),
	SPH_C64(0x1323D98C9F469F9F), SPH_C64(0x23FD17D3F0E7F0F0),
	SPH_C64(0x20947F6A4A354A4A), SPH_C64(0x44A9959EDA4FDADA),
	SPH_C64(0xA2B025FA587D5858), SPH_C64(0xCF8FCA06C903C9C9),
	SPH_C64(0x7C528D5529A42929), SPH_C64(0x5A1422500A280A0A),
	SPH_C64(0x507F4FE1B1FEB1B1), SPH_C64(0xC95D1A69A0BAA0A0),
	SPH_C64(0x14D6DA7F6BB16B6B), SPH_C64(0xD917AB5C852E8585),
	SPH_C64(0x3C677381BDCEBDBD), SPH_C64(0x8FBA34D25D695D5D),
	SPH_C64(0x9020508010401010), SPH_C64(0x07F503F3F4F7F4F4),
	SPH_C64(0xDD8BC016CB0BCBCB), SPH_C64(0xD37CC6ED3EF83E3E),
	SPH_C64(0x2D0A112805140505), SPH_C64(0x78CEE61F67816767),
	SPH_C64(0x97D55373E4B7E4E4), SPH_C64(0x024EBB25279C2727),
	SPH_C64(0x7382583241194141), SPH_C64(0xA70B9D2C8B168B8B),
	SPH_C64(0xF6530151A7A6A7A7), SPH_C64(0xB2FA94CF7DE97D7D),
	SPH_C64(0x4937FBDC956E9595), SPH_C64(0x56AD9F8ED847D8D8),
	SPH_C64(0x70EB308BFBCBFBFB), SPH_C64(0xCDC17123EE9FEEEE),
	SPH_C64(0xBBF891C77CED7C7C), SPH_C64(0x71CCE31766856666),
	SPH_C64(0x7BA78EA6DD53DDDD), SPH_C64(0xAF2E4BB8175C1717),
	SPH_C64(0x458E460247014747), SPH_C64(0x1A21DC849E429E9E),
	SPH_C64(0xD489C51ECA0FCACA), SPH_C64(0x585A99752DB42D2D),
	SPH_C64(0x2E637991BFC6BFBF), SPH_C64(0x3F0E1B38071C0707),
	SPH_C64(0xAC472301AD8EADAD), SPH_C64(0xB0B42FEA5A755A5A),
	SPH_C64(0xEF1BB56C83368383), SPH_C64(0xB666FF8533CC3333),
	SPH_C64(0x5CC6F23F63916363), SPH_C64(0x12040A1002080202),
	SPH_C64(0x93493839AA92AAAA), SPH_C64(0xDEE2A8AF71D97171),
	SPH_C64(0xC68DCF0EC807C8C8), SPH_C64(0xD1327DC819641919),
	SPH_C64(0x3B92707249394949), SPH_C64(0x5FAF9A86D943D9D9),
	SPH_C64(0x31F91DC3F2EFF2F2), SPH_C64(0xA8DB484BE3ABE3E3),
	SPH_C64(0xB9B62AE25B715B5B), SPH_C64(0xBC0D9234881A8888),
	SPH_C64(0x3E29C8A49A529A9A), SPH_C64(0x0B4CBE2D26982626),
	SPH_C64(0xBF64FA8D32C83232), SPH_C64(0x597D4AE9B0FAB0B0),
	SPH_C64(0xF2CF6A1BE983E9E9), SPH_C64(0x771E33780F3C0F0F),
	SPH_C64(0x33B7A6E6D573D5D5), SPH_C64(0xF41DBA74803A8080),
	SPH_C64(0x27617C99BEC2BEBE), SPH_C64(0xEB87DE26CD13CDCD),
	SPH_C64(0x8968E4BD34D03434), SPH_C64(0x3290757A483D4848),
	SPH_C64(0x54E324ABFFDBFFFF), SPH_C64(0x8DF48FF77AF57A7A),
	SPH_C64(0x643DEAF4907A9090), SPH_C64(0x9DBE3EC25F615F5F),
	SPH_C64(0x3D40A01D20802020), SPH_C64(0x0FD0D56768BD6868),
	SPH_C64(0xCA3472D01A681A1A), SPH_C64(0xB7412C19AE82AEAE),
	SPH_C64(0x7D755EC9B4EAB4B4), SPH_C64(0xCEA8199A544D5454),
	SPH_C64(0x7F3BE5EC93769393), SPH_C64(0x2F44AA0D22882222),
	SPH_C64(0x63C8E907648D6464), SPH_C64(0x2AFF12DBF1E3F1F1),
	SPH_C64(0xCCE6A2BF73D17373), SPH_C64(0x82245A9012481212),
	SPH_C64(0x7A805D3A401D4040), SPH_C64(0x4810284008200808),
	SPH_C64(0x959BE856C32BC3C3), SPH_C64(0xDFC57B33EC97ECEC),
	SPH_C64(0x4DAB9096DB4BDBDB), SPH_C64(0xC05F1F61A1BEA1A1),
	SPH_C64(0x9107831C8D0E8D8D), SPH_C64(0xC87AC9F53DF43D3D),
	SPH_C64(0x5B33F1CC97669797), SPH_C64(0x0000000000000000),
	SPH_C64(0xF983D436CF1BCFCF), SPH_C64(0x6E5687452BAC2B2B),
	SPH_C64(0xE1ECB39776C57676), SPH_C64(0xE619B06482328282),
	SPH_C64(0x28B1A9FED67FD6D6), SPH_C64(0xC33677D81B6C1B1B),
	SPH_C64(0x74775BC1B5EEB5B5), SPH_C64(0xBE432911AF86AFAF),
	SPH_C64(0x1DD4DF776AB56A6A), SPH_C64(0xEAA00DBA505D5050),
	SPH_C64(0x578A4C1245094545), SPH_C64(0x38FB18CBF3EBF3F3),
	SPH_C64(0xAD60F09D30C03030), SPH_C64(0xC4C3742BEF9BEFEF),
	SPH_C64(0xDA7EC3E53FFC3F3F), SPH_C64(0xC7AA1C9255495555),
	SPH_C64(0xDB591079A2B2A2A2), SPH_C64(0xE9C96503EA8FEAEA),
	SPH_C64(0x6ACAEC0F65896565), SPH_C64(0x036968B9BAD2BABA),
	SPH_C64(0x4A5E93652FBC2F2F), SPH_C64(0x8E9DE74EC027C0C0),
	SPH_C64(0x60A181BEDE5FDEDE), SPH_C64(0xFC386CE01C701C1C),
	SPH_C64(0x46E72EBBFDD3FDFD), SPH_C64(0x1F9A64524D294D4D),
	SPH_C64(0x7639E0E492729292), SPH_C64(0xFAEABC8F75C97575),
	SPH_C64(0x360C1E3006180606), SPH_C64(0xAE0998248A128A8A),
	SPH_C64(0x4B7940F9B2F2B2B2), SPH_C64(0x85D15963E6BFE6E6),
	SPH_C64(0x7E1C36700E380E0E), SPH_C64(0xE73E63F81F7C1F1F),
	SPH_C64(0x55C4F73762956262), SPH_C64(0x3AB5A3EED477D4D4),
	SPH_C64(0x814D3229A89AA8A8), SPH_C64(0x5231F4C496629696),
	SPH_C64(0x62EF3A9BF9C3F9F9), SPH_C64(0xA397F666C533C5C5),
	SPH_C64(0x104AB13525942525), SPH_C64(0xABB220F259795959),
	SPH_C64(0xD015AE54842A8484), SPH_C64(0xC5E4A7B772D57272),
	SPH_C64(0xEC72DDD539E43939), SPH_C64(0x1698615A4C2D4C4C),
	SPH_C64(0x94BC3BCA5E655E5E), SPH_C64(0x9FF085E778FD7878),
	SPH_C64(0xE570D8DD38E03838), SPH_C64(0x980586148C0A8C8C),
	SPH_C64(0x17BFB2C6D163D1D1), SPH_C64(0xE4570B41A5AEA5A5),
	SPH_C64(0xA1D94D43E2AFE2E2), SPH_C64(0x4EC2F82F61996161),
	SPH_C64(0x427B45F1B3F6B3B3), SPH_C64(0x3442A51521842121),
	SPH_C64(0x0825D6949C4A9C9C), SPH_C64(0xEE3C66F01E781E1E),
	SPH_C64(0x6186522243114343), SPH_C64(0xB193FC76C73BC7C7),
	SPH_C64(0x4FE52BB3FCD7FCFC), SPH_C64(0x2408142004100404),
	SPH_C64(0xE3A208B251595151), SPH_C64(0x252FC7BC995E9999),
	SPH_C64(0x22DAC44F6DA96D6D), SPH_C64(0x651A39680D340D0D),
	SPH_C64(0x79E93583FACFFAFA), SPH_C64(0x69A384B6DF5BDFDF),
	SPH_C64(0xA9FC9BD77EE57E7E), SPH_C64(0x1948B43D24902424),
	SPH_C64(0xFE76D7C53BEC3B3B), SPH_C64(0x9A4B3D31AB96ABAB),
	SPH_C64(0xF081D13ECE1FCECE), SPH_C64(0x9922558811441111),
	SPH_C64(0x8303890C8F068F8F), SPH_C64(0x049C6B4A4E254E4E),
	SPH_C64(0x667351D1B7E6B7B7), SPH_C64(0xE0CB600BEB8BEBEB),
	SPH_C64(0xC178CCFD3CF03C3C), SPH_C64(0xFD1FBF7C813E8181),
	SPH_C64(0x4035FED4946A9494), SPH_C64(0x1CF30CEBF7FBF7F7),
	SPH_C64(0x186F67A1B9DEB9B9), SPH_C64(0x8B265F98134C1313),
	SPH_C64(0x51589C7D2CB02C2C), SPH_C64(0x05BBB8D6D36BD3D3),
	SPH_C64(0x8CD35C6BE7BBE7E7), SPH_C64(0x39DCCB576EA56E6E),
	SPH_C64(0xAA95F36EC437C4C4), SPH_C64(0x1B060F18030C0303),
	SPH_C64(0xDCAC138A56455656), SPH_C64(0x5E88491A440D4444),
	SPH_C64(0xA0FE9EDF7FE17F7F), SPH_C64(0x884F3721A99EA9A9),
	SPH_C64(0x6754824D2AA82A2A), SPH_C64(0x0A6B6DB1BBD6BBBB),
	SPH_C64(0x879FE246C123C1C1), SPH_C64(0xF1A602A253515353),
	SPH_C64(0x72A58BAEDC57DCDC), SPH_C64(0x531627580B2C0B0B),
	SPH_C64(0x0127D39C9D4E9D9D), SPH_C64(0x2BD8C1476CAD6C6C),
	SPH_C64(0xA462F59531C43131), SPH_C64(0xF3E8B98774CD7474),
	SPH_C64(0x15F109E3F6FFF6F6), SPH_C64(0x4C8C430A46054646),
	SPH_C64(0xA5452609AC8AACAC), SPH_C64(0xB50F973C891E8989),
	SPH_C64(0xB42844A014501414), SPH_C64(0xBADF425BE1A3E1E1),
	SPH_C64(0xA62C4EB016581616), SPH_C64(0xF774D2CD3AE83A3A),
	SPH_C64(0x06D2D06F69B96969), SPH_C64(0x41122D4809240909),
	SPH_C64(0xD7E0ADA770DD7070), SPH_C64(0x6F7154D9B6E2B6B6),
	SPH_C64(0x1EBDB7CED067D0D0), SPH_C64(0xD6C77E3BED93EDED),
	SPH_C64(0xE285DB2ECC17CCCC), SPH_C64(0x6884572A42154242),
	SPH_C64(0x2C2DC2B4985A9898), SPH_C64(0xED550E49A4AAA4A4),
	SPH_C64(0x7550885D28A02828), SPH_C64(0x86B831DA5C6D5C5C),
	SPH_C64(0x6BED3F93F8C7F8F8), SPH_C64(0xC211A44486228686)
]

plain_T0 = new_array('plain_T0', *plain_T0)

plain_RC = [
	SPH_C64(0x4F01B887E8C62318),
	SPH_C64(0x52916F79F5D2A636),
	SPH_C64(0x357B0CA38E9BBC60),
	SPH_C64(0x57FE4B2EC2D7E01D),
	SPH_C64(0xDA4AF09FE5377715),
	SPH_C64(0x856BA0B10A29C958),
	SPH_C64(0x67053ECBF4105DBD),
	SPH_C64(0xD8957DA78B4127E4),
	SPH_C64(0x9E4717DD667CEEFB),
	SPH_C64(0x33835AAD07BF2DCA)
]

plain_RC = new_array('plain_RC', *plain_RC)

src = [input() for i in range(8)]

state = [new_const(0) for i in range(8)]

cc = sph_prepare_linear_c_for_import(c_code)
exec(cc)

for o in state:
    output(o)
